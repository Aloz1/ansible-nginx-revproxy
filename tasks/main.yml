---
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Install Nginx and ssl-cert
  package:
    name: '{{ nginx_revproxy.pkgs.nginx }}'
    state: present
  register:
    nginxinstalled
  delay: 10
  retries: 12
  until: nginxinstalled is successful
  tags:
    - nginxrevproxy
    - packages

- name: Install python-passlib for Python 3 hosts
  apt:
    name: '{{ nginx_revproxy.pkgs.passlib.py3 }}'
    state: present
  register:
    result
  delay: 10
  retries: 12
  until: result is successful
  tags:
    - nginxrevproxy
    - packages
  when:
    - ansible_python['version']['major'] == 3
    - item.value.auth is defined

- name: Install python-passlib for Python 2 hosts
  apt:
    name: '{{ nginx_revproxy.pkgs.passlib.py2 }}'
    state: present
  register:
    result
  delay: 10
  retries: 12
  until: result is successful
  tags:
    - nginxrevproxy
    - packages
  when:
    - ansible_python['version']['major'] == 2
    - item.value.auth is defined

- name: Set up nginx directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0640
  with_items:
    - '{{ nginx_revproxy.dirs.sites_available }}'
    - '{{ nginx_revproxy.dirs.sites_enabled }}'
  tags:
    - nginxrevproxy

- name: Add authentication
  htpasswd:
    path: "{{ nginx_revproxy.dirs.htpasswd }}{{ item.key }}_htpasswd"
    name: "{{ item.value.auth.login }}"
    password: "{{ item.value.auth.password }}"
    owner: root
    group: www-data
    mode: 0640
  with_dict: "{{ nginx_revproxy_sites }}"
  when:
    - nginxinstalled is success
    - item.value.auth is defined
  tags:
    - nginxrevproxy

- name: Add Site Config
  template:
    src: reverseproxy.conf.j2
    dest: '{{ nginx_revproxy.dirs.sites_available }}{{ item.key }}.conf'
    owner: root
    group: root
    mode: 0640
  with_dict: "{{ nginx_revproxy_sites }}"
  register:
    siteconfig
  when:
    - nginxinstalled is success
    - not item.value.ssl | default(True)
    - not item.value.letsencrypt | default(True)
  tags:
    - nginxrevproxy

- name: Add Https Site Config
  template:
    src: reverseproxy_ssl.conf.j2
    dest: '{{ nginx_revproxy.dirs.sites_available }}{{ item.key }}.conf'
    owner: root
    group: root
    mode: 0640
  with_dict: "{{ nginx_revproxy_sites }}"
  register:
    siteconfig
  when:
    - nginxinstalled is success
    - item.value.ssl | default(False)
    - not item.value.letsencrypt | default(True)
  tags:
    - nginxrevproxy

- name: Get Active Sites
  command: ls -1 '{{ nginx_revproxy.dirs.sites_enabled }}'
  changed_when: "active.stdout_lines != nginx_revproxy_sites.keys()|sort()"
  check_mode: false
  register: active
  tags:
    - nginxrevproxy

- name: De-activate Sites
  file:
    path: '{{ nginx_revproxy.dirs.sites_enabled }}{{ item }}'
    state: absent
  with_items: "{{ active.stdout_lines }}"
  notify: Reload Nginx
  when:
    - item not in nginx_revproxy_sites
    - nginx_revproxy_de_activate_sites
  tags:
    - nginxrevproxy

- name: Enable Site Config
  file:
    src: '{{ nginx_revproxy.dirs.sites_available }}{{ item.key }}.conf'
    dest: '{{ nginx_revproxy.dirs.sites_enabled }}{{ item.key }}'
    state: link
  with_dict: "{{ nginx_revproxy_sites }}"
  notify: Reload Nginx
  when:
    - siteconfig is success
    - not item.value.letsencrypt | default(True)
    - not ansible_check_mode
  tags:
    - nginxrevproxy

- name: Create WebRoot sites
  file:
    dest: '{{ nginx_revproxy.dirs.html }}{{ item.key }}/.well-known'
    mode: 0775
    state: directory
    owner: www-data
    group: www-data
  with_dict: "{{ nginx_revproxy_sites }}"
  notify: Reload Nginx
  when:
    - nginxinstalled is success
  tags:
    - nginxrevproxy

- name: WebRoot Permissions Sites
  file:
    dest: '{{ nginx_revproxy.dirs.html }}{{ item.key }}'
    mode: 0775
    state: directory
    owner: www-data
    group: www-data
    recurse: true
  with_dict: "{{ nginx_revproxy_sites }}"
  notify: Reload Nginx
  when:
    - nginxinstalled is success
  tags:
    - nginxrevproxy

- name: Get WebRoot Sites
  command: ls -1 '{{ nginx_revproxy.dirs.html }}'
  changed_when: "webroot.stdout_lines != nginx_revproxy_sites.keys()|sort()"
  check_mode: false
  register: webroot
  tags:
    - nginxrevproxy

- name: Remove WebRoot Sites
  file:
    path: '{{ nginx_revproxy.dirs.html }}'/var/www/{{ item }}/
    state: absent
  with_items: "{{ webroot.stdout_lines }}"
  notify: Reload Nginx
  when:
    - item not in nginx_revproxy_sites
    - nginx_revproxy_remove_webroot_sites
  tags:
    - nginxrevproxy

- include_tasks: letsencrypt.yml
  tags:
    - lesencrypt
    - nginxrevproxy
